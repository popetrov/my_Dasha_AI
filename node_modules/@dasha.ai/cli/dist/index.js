#!/usr/bin/env node
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const commander_1 = __importDefault(require("commander"));
const dasha = __importStar(require("@dasha.ai/sdk"));
const account_1 = require("./commands/account");
const diagnostics_1 = require("./commands/diagnostics");
const group_1 = require("./commands/group");
const sip_1 = require("./commands/sip");
const tts_1 = require("./commands/tts");
const profiler_1 = require("./commands/profiler");
const application_1 = require("./commands/application");
const nlu_1 = require("./commands/nlu");
const log_1 = require("./log");
dasha.log.clear();
dasha.log.add(log_1.log);
const program = commander_1.default.createCommand();
// eslint-disable-next-line @typescript-eslint/no-var-requires
program.name("dasha").version(require("../package.json").version);
program.addCommand(account_1.accountCommand);
program.addCommand(application_1.applicationCommand);
program.addCommand(diagnostics_1.diagnosticsCommand);
program.addCommand(group_1.groupCommand);
program.addCommand(nlu_1.nluCommand);
program.addCommand(profiler_1.profilerCommand);
program.addCommand(sip_1.sipCommand);
program.addCommand(tts_1.ttsCommand);
program.parseAsync().catch((err) => {
    log_1.log.error(`Command execution failed (${err.message})`);
    process.exitCode = 1;
});
//# sourceMappingURL=index.js.map