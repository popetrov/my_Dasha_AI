"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.groupCommand = void 0;
const commander_1 = __importDefault(require("commander"));
const dasha = __importStar(require("@dasha.ai/sdk"));
exports.groupCommand = commander_1.default.createCommand();
exports.groupCommand.name("group").description("group settings management");
exports.groupCommand
    .command("create <groupName>")
    .description("add a new group")
    .option("--max-concurrency <value>", "", (value) => parseInt(value, 10))
    .option("-d --description <string>")
    .action(async (groupName, options) => {
    const { description, maxConcurrency } = options;
    await dasha.groups.createGroup(groupName, { description, maxConcurrency });
});
exports.groupCommand
    .command("delete <groupName>")
    .description("delete a group")
    .option("-q --quiet", "do not complain if the group does not exist")
    .action(async (groupName, options) => {
    const { quiet } = options;
    await dasha.groups.deleteGroup(groupName, { quiet });
});
exports.groupCommand
    .command("list")
    .description("list all existing groups")
    .option("--include-temporary")
    .action(async (options) => {
    const { includeTemporary } = options;
    const groups = await dasha.groups.listGroups({ includeTemporary });
    console.log(JSON.stringify(groups, undefined, 2));
});
exports.groupCommand
    .command("update <groupName>")
    .description("update group settings")
    .option("--name <newName>")
    .option("--max-concurrency <value>", "", (value) => parseInt(value, 10))
    .option("--description <string>")
    .action(async (groupName, options) => {
    const { description, maxConcurrency } = options;
    await dasha.groups.updateGroup(groupName, { description, maxConcurrency });
});
//# sourceMappingURL=group.js.map