"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.profilerCommand = void 0;
const fs = __importStar(require("fs"));
const commander_1 = __importDefault(require("commander"));
const dasha = __importStar(require("@dasha.ai/sdk"));
exports.profilerCommand = commander_1.default.createCommand();
exports.profilerCommand.name("profiler").description("Data download manager for the profiler");
exports.profilerCommand
    .command("download")
    .requiredOption("-i, --appId <string>", "Application id")
    .requiredOption("-s, --start <date>", "Start of date range", (v) => new Date(v))
    .requiredOption("-e, --end <date>", "End of date range", (v) => new Date(v))
    .requiredOption("-o, --out <path>", "Relative path to save profile")
    .description("Download the profiler data")
    .action(async (options) => {
    const { appId: applicationId, start, end, out } = options;
    const request = { applicationId, start, end };
    const profile = await dasha.profiler.loadProfile(request);
    console.log(`Saving to ${out}`);
    await fs.promises.writeFile(out, profile, "binary");
});
//# sourceMappingURL=profiler.js.map