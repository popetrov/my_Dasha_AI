"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sipCommand = void 0;
const commander_1 = __importDefault(require("commander"));
const dasha = __importStar(require("@dasha.ai/sdk"));
const promptly = __importStar(require("promptly"));
exports.sipCommand = commander_1.default.createCommand();
exports.sipCommand.name("sip").description("SIP configuration settings");
//#region inbound
exports.sipCommand
    .command("create-inbound <configName>")
    .description("create an inbound SIP configuration")
    .requiredOption("--application-name <applicationName>", "name of the application specified in .dashaapp file")
    .option("--group-name <groupName>", "name of the group used to configure call flows (same as specified when deploying the app)")
    .option("--ip-acls <listOfIpsWithMasks>", "list of allowed IPs and networks in format '<ip>/<mask_length>' separated by commas", (value) => value.split(","))
    .option("--password <password>", "password that will be required from user")
    .option("--ask-password", "pass the password safely")
    .option("--priority <value>", "priority of calls in conversation queue", (value) => parseInt(value, 10), 0)
    .action(async (configName, options) => {
    if (options.askPassword)
        options.password = await promptly.password("Password:");
    const config = await dasha.sip.inboundConfigs.createConfig(configName, options);
    console.log(JSON.stringify(config, undefined, 2));
});
exports.sipCommand
    .command("delete-inbound <configName>")
    .description("delete an inbound SIP configuration")
    .option("-q --quiet", "do not complain if config does not exist")
    .action(async (configName, options) => {
    const { quiet } = options;
    await dasha.sip.inboundConfigs.deleteConfig(configName, { quiet });
});
exports.sipCommand
    .command("list-inbound")
    .description("list available inbound SIP configurations")
    .action(async () => {
    const configs = await dasha.sip.inboundConfigs.listConfigs();
    console.log(JSON.stringify(configs, undefined, 2));
});
exports.sipCommand
    .command("update-inbound <configName>")
    .description("update an inbound SIP configuration")
    .option("--application-name <applicationName>", "name of the application specified in .dashaapp file")
    .option("--group-name <groupName>", "name of the group used to configure call flows (same as specified when deploying the app)")
    .option("--ip-acls <listOfIpsWithMasks>", "list of allowed IPs and networks in format '<ip>/<mask_length>' separated by commas", (value) => value.split(","))
    .option("--password <password>", "password that will be required from user")
    .option("--ask-password", "pass the password safely")
    .option("--priority <value>", "priority of calls in conversation queue", (value) => parseInt(value, 10))
    .action(async (configName, options) => {
    if (options.askPassword)
        options.password = await promptly.password("Password:");
    await dasha.sip.inboundConfigs.updateConfig(configName, options);
});
//#endregion
//#region outbound
exports.sipCommand
    .command("create-outbound <configName>")
    .description("create an outbound SIP configuration")
    .requiredOption("--server <serverIpOrDns>", "IP address or domain name with optional port (i.e. '<ip>:[port]' or '<dns_name>:[port]', by default port is 5060)")
    .requiredOption("--account <sipAccountName>", "username, that will be used in SIP 'From' header and in Auth Challenge if authorization is required")
    .option("--domain <domain>", "domain name, that will be used in 'From' and 'To' headers (after @)")
    .option("--password <password>", "password that will be used to connect to SIP trunk")
    .option("--ask-password", "pass the password safely")
    .option("--transport <tcp|udp>", "lower-level transport protocol, that will be used for transferring SIP messages", "udp")
    .action(async (configName, options) => {
    if (options.askPassword)
        options.password = await promptly.password("Password:");
    const config = await dasha.sip.outboundConfigs.createConfig(configName, options);
    console.log(JSON.stringify(config, undefined, 2));
});
exports.sipCommand
    .command("delete-outbound <configName>")
    .description("delete an outbound SIP configuration")
    .option("-q --quiet", "do not complain if config does not exist")
    .action(async (configName, options) => {
    const { quiet } = options;
    await dasha.sip.outboundConfigs.deleteConfig(configName, { quiet });
});
exports.sipCommand
    .command("list-outbound")
    .description("list available outbound SIP configurations")
    .action(async () => {
    const configs = await dasha.sip.outboundConfigs.listConfigs();
    console.log(JSON.stringify(configs, undefined, 2));
});
exports.sipCommand
    .command("update-outbound <configName>")
    .description("update an outbound SIP configuration")
    .option("--server <serverIpOrDns>", "IP address or domain name with optional port (i.e. '<ip>:[port]' or '<dns_name>:[port]', by default port is 5060)")
    .option("--account <sipAccountName>", "username, that will be used in SIP 'From' header and in Auth Challenge if authorization is required")
    .option("--domain <domain>", "domain name, that will be used in 'From' and 'To' headers (after @)")
    .option("--password <password>", "password that will be used to connect to SIP trunk")
    .option("--ask-password", "pass the password safely")
    .action(async (configName, options) => {
    if (options.askPassword)
        options.password = await promptly.password("Password:");
    await dasha.sip.outboundConfigs.updateConfig(configName, options);
});
//#endregion
//# sourceMappingURL=sip.js.map