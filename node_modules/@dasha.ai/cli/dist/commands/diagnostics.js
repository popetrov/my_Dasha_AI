"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.diagnosticsCommand = void 0;
const commander_1 = __importDefault(require("commander"));
const dasha = __importStar(require("@dasha.ai/sdk"));
exports.diagnosticsCommand = commander_1.default.createCommand();
exports.diagnosticsCommand.name("diagnostics").description("diagnostic information").alias("diag");
exports.diagnosticsCommand
    .command("limits")
    .description("")
    .action(async () => {
    const limits = await dasha.diagnostics.getLimits();
    console.log(JSON.stringify(limits, undefined, 2));
});
exports.diagnosticsCommand
    .command("queues")
    .description("")
    .action(async () => {
    const queueStates = await dasha.diagnostics.getQueueStates();
    console.log(JSON.stringify(queueStates, undefined, 2));
});
exports.diagnosticsCommand
    .command("show")
    .description("show all diagnostics")
    .action(async () => {
    const customer = await dasha.customer.getCustomerInfo();
    const limits = await dasha.diagnostics.getLimits();
    const queueStates = await dasha.diagnostics.getQueueStates();
    console.log(JSON.stringify({ customer, limits, queueStates }, undefined, 2));
});
//# sourceMappingURL=diagnostics.js.map