"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.nluCommand = void 0;
const commander_1 = __importDefault(require("commander"));
const sdk_1 = require("@dasha.ai/sdk");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const readline = __importStar(require("readline"));
const glob_1 = __importDefault(require("glob"));
function findSingleDashaapp(directory) {
    let files = glob_1.default.sync("**/*.dashaapp");
    files = files.filter((f) => fs_1.default.lstatSync(f).isFile());
    if (files.length === 0)
        throw new Error(`Could not find any .dashaapp file in path '${directory}'`);
    if (files.length > 1)
        throw new Error(`Could not get .dashaapp file since several files are found.` +
            `Please, provide path to file or call 'nlu' command from nested directory with single .dashaapp file.` +
            ` Found files: ${JSON.stringify(files)}`);
    const dashaappFilePath = files[0];
    if (dashaappFilePath === undefined)
        throw new Error(`Could not find .dashaapp file`);
    return dashaappFilePath;
}
async function parseValidateDashaapp(dashaappFilePath) {
    let dashaappConfig;
    try {
        dashaappConfig = JSON.parse(fs_1.default.readFileSync(dashaappFilePath, "utf-8"));
    }
    catch (e) {
        throw new Error(`Could not parse .dashaapp file, reason: ${e.message}`);
    }
    const nluConfig = dashaappConfig.nlu;
    if (nluConfig === undefined)
        throw new Error("Dashaapp file does not contain nlu section");
    const language = nluConfig.language;
    if (language === undefined)
        throw new Error("Dashaapp file does not contain nlu language");
    return dashaappConfig;
}
exports.nluCommand = commander_1.default.createCommand();
exports.nluCommand.name("nlu").description("nlu service api");
exports.nluCommand
    .command("recognize [text]")
    .description("train dataset and parse text with provided skills")
    .option("--dashaapp <path>", "Path to .dashaapp file")
    .option("--interactive", "Enable interactive mode", true)
    .action(async (text, options) => {
    var _a, _b;
    let dashaappFilePath = options.dashaapp;
    if (dashaappFilePath === undefined) {
        console.log("Trying to find .dashaapp file in current directory...");
        dashaappFilePath = findSingleDashaapp(".");
        console.log(`Found file '${dashaappFilePath}'`);
    }
    const dashaapp = await parseValidateDashaapp(dashaappFilePath);
    const nluConfig = dashaapp.nlu;
    const nluService = await sdk_1.nlu.NluService.create();
    let someSkillWasLoaded = false;
    if (((_a = nluConfig.skills) === null || _a === void 0 ? void 0 : _a.length) > 0) {
        console.log(`Loading skills ${JSON.stringify(nluConfig.skills)}...`);
        await nluService.loadSkills(nluConfig.skills.map((s) => {
            return { id: s, language: nluConfig.language };
        }));
        console.log(`Successfully loaded skills`);
        someSkillWasLoaded = true;
    }
    else {
        console.log("No additional skills were provided");
    }
    if (((_b = nluConfig.customIntents) === null || _b === void 0 ? void 0 : _b.file) !== undefined) {
        const dashaappDirectory = path_1.default.dirname(dashaappFilePath);
        const datasetPath = path_1.default.join(dashaappDirectory, nluConfig.customIntents.file);
        console.log(`Training custom dataset...`);
        const customSkill = await nluService.train(datasetPath, nluConfig.language);
        console.log(`Successfully trained custom skill '${customSkill}'`);
        someSkillWasLoaded = true;
    }
    else {
        console.log("No custom dataset was provided");
    }
    if (!someSkillWasLoaded) {
        console.log("No skills were loaded, exiting");
        return;
    }
    console.log(`Using skills: ${JSON.stringify(nluService.skillInfo, null, 2)}`);
    const recognizeText = async (text) => {
        console.log(`Recognition result for '${text}': ${JSON.stringify(await nluService.recognize(text), null, 2)}`);
    };
    if (text !== undefined) {
        await recognizeText(text);
    }
    if (options.interactive) {
        console.log("Interactive mode enabled");
        const cli = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        });
        while (!nluService.isClosed) {
            const textToRec = await new Promise((r) => cli.question("Pass text to recognize (press Enter to exit): ", r));
            if (textToRec !== "") {
                await recognizeText(textToRec);
            }
            else {
                console.log("Exiting interactive mode");
                cli.close();
                break;
            }
        }
    }
    nluService.close();
});
exports.nluCommand
    .command("train")
    .description("train dataset configured by provided .dashaapp file")
    .option("--dashaapp <path>", "Path to .dashaapp file")
    .action(async (options) => {
    var _a;
    let dashaappFilePath = options.dashaapp;
    if (dashaappFilePath === undefined) {
        console.log("Trying to find .dashaapp file in current directory...");
        dashaappFilePath = findSingleDashaapp(".");
        console.log(`Found file '${dashaappFilePath}'`);
    }
    const dashaapp = await parseValidateDashaapp(dashaappFilePath);
    const nluConfig = dashaapp.nlu;
    const nluService = await sdk_1.nlu.NluService.create();
    if (((_a = nluConfig.customIntents) === null || _a === void 0 ? void 0 : _a.file) === undefined)
        throw new Error(`Dashaapp file does not contain nlu custom dataset`);
    const dashaappDirectory = path_1.default.dirname(dashaappFilePath);
    const datasetPath = path_1.default.join(dashaappDirectory, nluConfig.customIntents.file);
    console.log(`Training custom dataset...`);
    const customSkill = await nluService.train(datasetPath, nluConfig.language);
    console.log(`Successfully trained custom skill '${customSkill}'`);
    nluService.close();
});
//# sourceMappingURL=nlu.js.map