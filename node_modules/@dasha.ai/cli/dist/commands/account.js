"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.accountCommand = void 0;
const events_1 = require("events");
const http = __importStar(require("http"));
const commander_1 = __importDefault(require("commander"));
const dasha = __importStar(require("@dasha.ai/sdk"));
const open_1 = __importDefault(require("open"));
const promptly = __importStar(require("promptly"));
const log_1 = require("./../log");
function printAccount(accountName, account, isCurrent) {
    console.log(`${accountName} ${isCurrent ? "(current)" : ""}:`);
    console.log(`  server: ${account.server}`);
    console.log(`  apiKey: ${account.apiKey}`);
    if (account.insecure)
        console.log(`  insecure: true`);
    console.log(``);
}
exports.accountCommand = commander_1.default.createCommand();
exports.accountCommand.name("account").description("Dasha.AI account management");
exports.accountCommand
    .command("add [accountName]")
    .description("add a new account")
    .requiredOption("--server <server>", "server url", "app.us.dasha.ai")
    .option("--api-key <key>", "Dasha API key")
    .option("--insecure", "use an insecure connection")
    .option("-f --overwrite", "overwrite an existing account")
    .action(async (accountName, options) => {
    var _a;
    accountName !== null && accountName !== void 0 ? accountName : (accountName = "default");
    const { server, insecure, overwrite } = options;
    const apiKey = (_a = options.apiKey) !== null && _a !== void 0 ? _a : (await promptly.prompt("Enter your API key:"));
    await dasha.account.setAccount(accountName, { server, apiKey, insecure: insecure || undefined }, { overwrite });
});
//deprecated
exports.accountCommand
    .command("create [accountName]")
    .requiredOption("--server <server>", "server url", "app.us.dasha.ai")
    .option("--api-key <key>", "Dasha API key")
    .option("--insecure", "use an insecure connection")
    .option("-f --overwrite", "overwrite an existing account")
    .description("Deprecated. use 'add'")
    .action(() => {
    log_1.log.error("This command is deprecated.");
    log_1.log.error("Use: dasha account add");
    process.exit(1);
});
exports.accountCommand
    .command("info [accountName]")
    .description("print account details")
    .action(async (accountName) => {
    const currentAccountName = await dasha.account.getCurrentAccountName();
    accountName !== null && accountName !== void 0 ? accountName : (accountName = currentAccountName);
    if (accountName === undefined) {
        throw new Error(`no account is set as current`);
    }
    const account = await dasha.account.getAccount(accountName);
    printAccount(accountName, account, accountName === currentAccountName);
});
exports.accountCommand
    .command("list")
    .description("list all known accounts")
    .action(async () => {
    const accounts = await dasha.account.listAccounts();
    const currentAccountName = await dasha.account.getCurrentAccountName();
    for (const [accountName, account] of Object.entries(accounts)) {
        printAccount(accountName, account, accountName === currentAccountName);
    }
});
exports.accountCommand
    .command("login [accountName]")
    .alias("register")
    .description("log into an account")
    .option("--server <server>", "server url", "app.us.dasha.ai")
    .option("--insecure", "use an insecure connection")
    .action(async (accountName, options) => {
    accountName !== null && accountName !== void 0 ? accountName : (accountName = "default");
    const { server, insecure } = options;
    const redirectServer = http.createServer();
    redirectServer.listen({ host: "localhost", port: 0 });
    await events_1.once(redirectServer, "listening");
    const { port } = redirectServer.address();
    const redirectUri = `http://localhost:${port}`;
    const account = await dasha.auth.authorize({
        server,
        insecure,
        redirectUri,
        responseType: "form",
        callback: async (authUri) => {
            try {
                await open_1.default(authUri, { wait: false });
            }
            catch (error) {
                log_1.log.debug(error);
                console.log("Please open this link in a browser on this computer:");
                console.log(authUri);
            }
            const [req, res] = (await events_1.once(redirectServer, "request"));
            res.writeHead(200, { Connection: "close" });
            res.end("You can now close this page.");
            return req;
        },
    });
    redirectServer.close();
    redirectServer.unref();
    await dasha.account.setAccount(accountName, account, { overwrite: true });
    await dasha.account.setCurrentAccountName(accountName);
    printAccount(accountName, account, true);
});
exports.accountCommand
    .command("remove <accountName>")
    .description("remove an account")
    .option("-q --quiet", "do not complain if the account does not exist")
    .action(async (accountName, options) => {
    const { quiet } = options;
    await dasha.account.deleteAccount(accountName, { quiet });
});
exports.accountCommand
    .command("rename <oldAccountName> <newAccountName>")
    .description("rename an account")
    .option("-f --overwrite", "overwrite an existing account")
    .action(async (oldAccountName, newAccountName, options) => {
    const { overwrite } = options;
    await dasha.account.renameAccount(oldAccountName, newAccountName, { overwrite });
});
exports.accountCommand
    .command("start-trial [accountName]")
    .option("--server <url>", "server url", "app.us.dasha.ai")
    .option("--insecure", "use an insecure connection")
    .action(async (accountName, options) => {
    accountName !== null && accountName !== void 0 ? accountName : (accountName = "default");
    const { server, insecure } = options;
    const account = await dasha.auth.startTrial({ server, insecure });
    await dasha.account.setAccount(accountName, account, { overwrite: true });
    await dasha.account.setCurrentAccountName(accountName);
});
exports.accountCommand
    .command("use <accountName>")
    .description("set an account as current")
    .action(async (accountName) => {
    log_1.log.info(`Trying to set current account as ${accountName}...`);
    await dasha.account.setCurrentAccountName(accountName);
    console.log(`${accountName} is your current account now`);
});
//# sourceMappingURL=account.js.map