"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Dasha.AI Platform API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShareProjectApi = exports.ShareProjectApiFactory = exports.ShareProjectApiFp = exports.ShareProjectApiAxiosParamCreator = void 0;
const axios_1 = __importDefault(require("axios"));
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("../common");
// @ts-ignore
const base_1 = require("../base");
/**
 * ShareProjectApi - axios parameter creator
 * @export
 */
const ShareProjectApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectGet: async (skip, take, options = {}) => {
            const localVarPath = `/api/v1/share/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (skip !== undefined) {
                localVarQueryParameter['skip'] = skip;
            }
            if (take !== undefined) {
                localVarQueryParameter['take'] = take;
            }
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdContentGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ShareProjectIdContentGet', 'id', id);
            const localVarPath = `/api/v1/share/project/{id}/content`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdDelete: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ShareProjectIdDelete', 'id', id);
            const localVarPath = `/api/v1/share/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdGet: async (id, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ShareProjectIdGet', 'id', id);
            const localVarPath = `/api/v1/share/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} id
         * @param {string} [nameValue]
         * @param {boolean} [nameHasValue]
         * @param {string} [descriptionValue]
         * @param {boolean} [descriptionHasValue]
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdPatch: async (id, nameValue, nameHasValue, descriptionValue, descriptionHasValue, body, options = {}) => {
            // verify required parameter 'id' is not null or undefined
            common_1.assertParamExists('apiV1ShareProjectIdPatch', 'id', id);
            const localVarPath = `/api/v1/share/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (nameValue !== undefined) {
                localVarQueryParameter['Name.Value'] = nameValue;
            }
            if (nameHasValue !== undefined) {
                localVarQueryParameter['Name.HasValue'] = nameHasValue;
            }
            if (descriptionValue !== undefined) {
                localVarQueryParameter['Description.Value'] = descriptionValue;
            }
            if (descriptionHasValue !== undefined) {
                localVarQueryParameter['Description.HasValue'] = descriptionHasValue;
            }
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {string} name
         * @param {string} description
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectPost: async (name, description, body, options = {}) => {
            // verify required parameter 'name' is not null or undefined
            common_1.assertParamExists('apiV1ShareProjectPost', 'name', name);
            // verify required parameter 'description' is not null or undefined
            common_1.assertParamExists('apiV1ShareProjectPost', 'description', description);
            // verify required parameter 'body' is not null or undefined
            common_1.assertParamExists('apiV1ShareProjectPost', 'body', body);
            const localVarPath = `/api/v1/share/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication Bearer required
            await common_1.setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration);
            // authentication oauth2 required
            // oauth required
            await common_1.setOAuthToObject(localVarHeaderParameter, "oauth2", ["platform_api"], configuration);
            if (name !== undefined) {
                localVarQueryParameter['Name'] = name;
            }
            if (description !== undefined) {
                localVarQueryParameter['Description'] = description;
            }
            localVarHeaderParameter['Content-Type'] = 'application/octet-stream';
            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            localVarRequestOptions.data = common_1.serializeDataIfNeeded(body, localVarRequestOptions, configuration);
            return {
                url: common_1.toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
exports.ShareProjectApiAxiosParamCreator = ShareProjectApiAxiosParamCreator;
/**
 * ShareProjectApi - functional programming interface
 * @export
 */
const ShareProjectApiFp = function (configuration) {
    const localVarAxiosParamCreator = exports.ShareProjectApiAxiosParamCreator(configuration);
    return {
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShareProjectGet(skip, take, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShareProjectGet(skip, take, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShareProjectIdContentGet(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShareProjectIdContentGet(id, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShareProjectIdDelete(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShareProjectIdDelete(id, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShareProjectIdGet(id, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShareProjectIdGet(id, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} id
         * @param {string} [nameValue]
         * @param {boolean} [nameHasValue]
         * @param {string} [descriptionValue]
         * @param {boolean} [descriptionHasValue]
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShareProjectIdPatch(id, nameValue, nameHasValue, descriptionValue, descriptionHasValue, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShareProjectIdPatch(id, nameValue, nameHasValue, descriptionValue, descriptionHasValue, body, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
        /**
         *
         * @param {string} name
         * @param {string} description
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1ShareProjectPost(name, description, body, options) {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiV1ShareProjectPost(name, description, body, options);
            return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);
        },
    };
};
exports.ShareProjectApiFp = ShareProjectApiFp;
/**
 * ShareProjectApi - factory interface
 * @export
 */
const ShareProjectApiFactory = function (configuration, basePath, axios) {
    const localVarFp = exports.ShareProjectApiFp(configuration);
    return {
        /**
         *
         * @param {number} [skip]
         * @param {number} [take]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectGet(skip, take, options) {
            return localVarFp.apiV1ShareProjectGet(skip, take, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdContentGet(id, options) {
            return localVarFp.apiV1ShareProjectIdContentGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdDelete(id, options) {
            return localVarFp.apiV1ShareProjectIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdGet(id, options) {
            return localVarFp.apiV1ShareProjectIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} id
         * @param {string} [nameValue]
         * @param {boolean} [nameHasValue]
         * @param {string} [descriptionValue]
         * @param {boolean} [descriptionHasValue]
         * @param {any} [body]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectIdPatch(id, nameValue, nameHasValue, descriptionValue, descriptionHasValue, body, options) {
            return localVarFp.apiV1ShareProjectIdPatch(id, nameValue, nameHasValue, descriptionValue, descriptionHasValue, body, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {string} name
         * @param {string} description
         * @param {any} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1ShareProjectPost(name, description, body, options) {
            return localVarFp.apiV1ShareProjectPost(name, description, body, options).then((request) => request(axios, basePath));
        },
    };
};
exports.ShareProjectApiFactory = ShareProjectApiFactory;
/**
 * ShareProjectApi - object-oriented interface
 * @export
 * @class ShareProjectApi
 * @extends {BaseAPI}
 */
class ShareProjectApi extends base_1.BaseAPI {
    /**
     *
     * @param {number} [skip]
     * @param {number} [take]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareProjectApi
     */
    apiV1ShareProjectGet(skip, take, options) {
        return exports.ShareProjectApiFp(this.configuration).apiV1ShareProjectGet(skip, take, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareProjectApi
     */
    apiV1ShareProjectIdContentGet(id, options) {
        return exports.ShareProjectApiFp(this.configuration).apiV1ShareProjectIdContentGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareProjectApi
     */
    apiV1ShareProjectIdDelete(id, options) {
        return exports.ShareProjectApiFp(this.configuration).apiV1ShareProjectIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareProjectApi
     */
    apiV1ShareProjectIdGet(id, options) {
        return exports.ShareProjectApiFp(this.configuration).apiV1ShareProjectIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} id
     * @param {string} [nameValue]
     * @param {boolean} [nameHasValue]
     * @param {string} [descriptionValue]
     * @param {boolean} [descriptionHasValue]
     * @param {any} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareProjectApi
     */
    apiV1ShareProjectIdPatch(id, nameValue, nameHasValue, descriptionValue, descriptionHasValue, body, options) {
        return exports.ShareProjectApiFp(this.configuration).apiV1ShareProjectIdPatch(id, nameValue, nameHasValue, descriptionValue, descriptionHasValue, body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {string} name
     * @param {string} description
     * @param {any} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShareProjectApi
     */
    apiV1ShareProjectPost(name, description, body, options) {
        return exports.ShareProjectApiFp(this.configuration).apiV1ShareProjectPost(name, description, body, options).then((request) => request(this.axios, this.basePath));
    }
}
exports.ShareProjectApi = ShareProjectApi;
//# sourceMappingURL=share-project-api.js.map