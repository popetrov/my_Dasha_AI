"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.file = exports.directory = void 0;
const log_1 = require("./log");
const errors = __importStar(require("./errors"));
// the code here is written as if `archiver` was an optional dependency
// based on the assumption that we may want to work with pre-packed applications
// in the future
/** @internal */
async function directory(path, log) {
    const { default: archiver } = await Promise.resolve().then(() => __importStar(require("archiver"))).catch(() => {
        log_1.logAndThrow(log, new errors.OptionalDependencyNotFoundError("archiver"));
    });
    return new Promise((resolve, reject) => {
        const zip = archiver("zip");
        const chunks = [];
        zip.on("error", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        zip.on("warning", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        zip.on("data", (chunk) => chunks.push(chunk));
        zip.on("finish", () => resolve(Buffer.concat(chunks)));
        zip.directory(path, false);
        zip.finalize().catch((error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
    });
}
exports.directory = directory;
/** @internal */
async function jszipFile(name, content, log) {
    const { default: JSZip } = await Promise.resolve().then(() => __importStar(require("jszip")));
    const zip = new JSZip();
    zip.file(name, content);
    const array = await zip.generateAsync({ type: "uint8array" }).catch((error) => {
        log_1.logAndThrow(log, new errors.FileSystemError(error));
    });
    return array;
}
/** @internal */
async function archiverFile(name, value, log) {
    const { default: archiver } = await Promise.resolve().then(() => __importStar(require("archiver")));
    const stream = await Promise.resolve().then(() => __importStar(require("stream")));
    return new Promise((resolve, reject) => {
        const zip = archiver("zip");
        const chunks = [];
        zip.on("error", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        zip.on("warning", (error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
        zip.on("data", (chunk) => chunks.push(chunk));
        zip.on("finish", () => resolve(Buffer.concat(chunks)));
        // https://github.com/archiverjs/node-archiver/issues/542
        // TODO: revert when upstream is fixed
        // zip.append(value, { name });
        const valueStream = new stream.Readable();
        valueStream.push(Buffer.from(value, "utf-8"));
        valueStream.push(null);
        zip.append(valueStream, { name });
        zip.finalize().catch((error) => reject(log_1.logAndReturn(log, new errors.FileSystemError(error))));
    });
}
/** @internal */
async function file(name, content, log) {
    try {
        await Promise.resolve().then(() => __importStar(require("archiver"))).catch(() => {
            log_1.logAndThrow(log, new errors.OptionalDependencyNotFoundError("archiver"));
        });
        return await archiverFile(name, content, log);
    }
    catch (e) {
        await Promise.resolve().then(() => __importStar(require("jszip"))).catch(() => {
            log_1.logAndThrow(log, new errors.OptionalDependencyNotFoundError("jszip"));
        });
        return await jszipFile(name, content, log);
    }
}
exports.file = file;
//# sourceMappingURL=zip.js.map