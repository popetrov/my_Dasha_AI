"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createNluServiceClient = exports.createProcessingClient = exports.createTextProtocolClient = exports.createExternalTtsClient = exports.textProtocol = exports.externalTtsProtocol = exports.processing = void 0;
const errors = __importStar(require("../errors"));
const log_1 = require("../log");
const processing = __importStar(require("./types/processing"));
exports.processing = processing;
const externalTtsProtocol = __importStar(require("./types/external-tts-protocol"));
exports.externalTtsProtocol = externalTtsProtocol;
const textProtocol = __importStar(require("./types/text-protocol"));
exports.textProtocol = textProtocol;
var Grpc;
(function (Grpc) {
    Grpc[Grpc["NotImplemented"] = 0] = "NotImplemented";
    Grpc[Grpc["Node"] = 1] = "Node";
    Grpc[Grpc["Web"] = 2] = "Web";
})(Grpc || (Grpc = {}));
const getGrpc = async () => {
    const grpc = await Promise.resolve().then(() => __importStar(require("@grpc/grpc-js"))).catch(() => null);
    if (grpc)
        return Grpc.Node;
    const grpcWeb = await Promise.resolve().then(() => __importStar(require("grpc-web"))).catch(() => null);
    if (grpcWeb)
        return Grpc.Web;
    return Grpc.NotImplemented;
};
const createExternalTtsClient = async (account, log) => {
    switch (await getGrpc()) {
        case Grpc.Node: {
            const { ExternalTtsClient } = await Promise.resolve().then(() => __importStar(require("./node/external-tts-protocol")));
            return new ExternalTtsClient(account, log);
        }
        case Grpc.Web: {
            const { ExternalTtsClient } = await Promise.resolve().then(() => __importStar(require("./web/external-tts-protocol")));
            return new ExternalTtsClient(account, log);
        }
        case Grpc.NotImplemented:
            log_1.logAndThrow(log, new errors.NotImplementedError("grpc is not implemented ExternalTtsClient"));
    }
};
exports.createExternalTtsClient = createExternalTtsClient;
const createTextProtocolClient = async (account, log) => {
    switch (await getGrpc()) {
        case Grpc.Node: {
            const { TextProtocolClient } = await Promise.resolve().then(() => __importStar(require("./node/text-protocol")));
            return new TextProtocolClient(account, log);
        }
        case Grpc.Web: {
            const { TextProtocolClient } = await Promise.resolve().then(() => __importStar(require("./web/text-protocol")));
            return new TextProtocolClient(account, log);
        }
        case Grpc.NotImplemented:
            log_1.logAndThrow(log, new errors.NotImplementedError("grpc is not implemented TextProtocolClient"));
    }
};
exports.createTextProtocolClient = createTextProtocolClient;
const createProcessingClient = async (account, log) => {
    switch (await getGrpc()) {
        case Grpc.Node: {
            const { ProcessingClient } = await Promise.resolve().then(() => __importStar(require("./node/processing")));
            return new ProcessingClient(account, log);
        }
        case Grpc.Web: {
            const { ProcessingClient } = await Promise.resolve().then(() => __importStar(require("./web/processing")));
            return new ProcessingClient(account, log);
        }
        case Grpc.NotImplemented:
            log_1.logAndThrow(log, new errors.NotImplementedError("grpc is not implemented ProcessingClient"));
    }
};
exports.createProcessingClient = createProcessingClient;
const createNluServiceClient = async (account, log) => {
    switch (await getGrpc()) {
        case Grpc.Node: {
            const { NluServiceClient } = await Promise.resolve().then(() => __importStar(require("./node/nlu")));
            return new NluServiceClient(account, log);
        }
        case Grpc.Web: {
            const { NluServiceClient } = await Promise.resolve().then(() => __importStar(require("./web/nlu")));
            return new NluServiceClient(account, log);
        }
        case Grpc.NotImplemented:
            log_1.logAndThrow(log, new errors.NotImplementedError("grpc is not implemented ProcessingClient"));
    }
};
exports.createNluServiceClient = createNluServiceClient;
//# sourceMappingURL=index.js.map