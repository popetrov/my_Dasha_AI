"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for dasha.sdk
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
const grpc = {};
grpc.web = require('grpc-web');
const proto = {};
proto.dasha = {};
proto.dasha.sdk = require('./sdk_pb.js');
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.ProcessingClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.ProcessingPromiseClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.RegisterRequest,
 *   !proto.dasha.sdk.RegisterResponse>}
 */
const methodDescriptor_Processing_Register = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/Register', grpc.web.MethodType.UNARY, proto.dasha.sdk.RegisterRequest, proto.dasha.sdk.RegisterResponse, 
/**
 * @param {!proto.dasha.sdk.RegisterRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.RegisterResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.RegisterResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.RegisterResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.register =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/Register', request, metadata || {}, methodDescriptor_Processing_Register, callback);
    };
/**
 * @param {!proto.dasha.sdk.RegisterRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.RegisterResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.register =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/Register', request, metadata || {}, methodDescriptor_Processing_Register);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.RegisterRequest,
 *   !proto.dasha.sdk.InstanceEvent>}
 */
const methodDescriptor_Processing_RegisterInstanceStream = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/RegisterInstanceStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.RegisterRequest, proto.dasha.sdk.InstanceEvent, 
/**
 * @param {!proto.dasha.sdk.RegisterRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.InstanceEvent.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.RegisterRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.InstanceEvent>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.registerInstanceStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/RegisterInstanceStream', request, metadata || {}, methodDescriptor_Processing_RegisterInstanceStream);
    };
/**
 * @param {!proto.dasha.sdk.RegisterRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.InstanceEvent>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.registerInstanceStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/RegisterInstanceStream', request, metadata || {}, methodDescriptor_Processing_RegisterInstanceStream);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AddSessionConfigRequest,
 *   !proto.dasha.sdk.AddSessionConfigResponse>}
 */
const methodDescriptor_Processing_AddSessionConfig = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/AddSessionConfig', grpc.web.MethodType.UNARY, proto.dasha.sdk.AddSessionConfigRequest, proto.dasha.sdk.AddSessionConfigResponse, 
/**
 * @param {!proto.dasha.sdk.AddSessionConfigRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.AddSessionConfigResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AddSessionConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.AddSessionConfigResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.AddSessionConfigResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.addSessionConfig =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/AddSessionConfig', request, metadata || {}, methodDescriptor_Processing_AddSessionConfig, callback);
    };
/**
 * @param {!proto.dasha.sdk.AddSessionConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.AddSessionConfigResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.addSessionConfig =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/AddSessionConfig', request, metadata || {}, methodDescriptor_Processing_AddSessionConfig);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.StreamInit,
 *   !proto.dasha.sdk.StreamMessage>}
 */
const methodDescriptor_Processing_RuntimeStream = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/RuntimeStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.StreamInit, proto.dasha.sdk.StreamMessage, 
/**
 * @param {!proto.dasha.sdk.StreamInit} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.StreamMessage.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.StreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.StreamMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.runtimeStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/RuntimeStream', request, metadata || {}, methodDescriptor_Processing_RuntimeStream);
    };
/**
 * @param {!proto.dasha.sdk.StreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.StreamMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.runtimeStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/RuntimeStream', request, metadata || {}, methodDescriptor_Processing_RuntimeStream);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.StreamInit,
 *   !proto.dasha.sdk.StreamMessage>}
 */
const methodDescriptor_Processing_DebugStream = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/DebugStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.StreamInit, proto.dasha.sdk.StreamMessage, 
/**
 * @param {!proto.dasha.sdk.StreamInit} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.StreamMessage.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.StreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.StreamMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.debugStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/DebugStream', request, metadata || {}, methodDescriptor_Processing_DebugStream);
    };
/**
 * @param {!proto.dasha.sdk.StreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.StreamMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.debugStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/DebugStream', request, metadata || {}, methodDescriptor_Processing_DebugStream);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.StreamInit,
 *   !proto.dasha.sdk.JobNotification>}
 */
const methodDescriptor_Processing_JobStatusStream = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/JobStatusStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.StreamInit, proto.dasha.sdk.JobNotification, 
/**
 * @param {!proto.dasha.sdk.StreamInit} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.JobNotification.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.StreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.JobNotification>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.jobStatusStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/JobStatusStream', request, metadata || {}, methodDescriptor_Processing_JobStatusStream);
    };
/**
 * @param {!proto.dasha.sdk.StreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.JobNotification>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.jobStatusStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/JobStatusStream', request, metadata || {}, methodDescriptor_Processing_JobStatusStream);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AcceptJobMessage,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_Processing_AcceptJob = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/AcceptJob', grpc.web.MethodType.UNARY, proto.dasha.sdk.AcceptJobMessage, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.AcceptJobMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AcceptJobMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.acceptJob =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/AcceptJob', request, metadata || {}, methodDescriptor_Processing_AcceptJob, callback);
    };
/**
 * @param {!proto.dasha.sdk.AcceptJobMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.acceptJob =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/AcceptJob', request, metadata || {}, methodDescriptor_Processing_AcceptJob);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.RejectJobMessage,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_Processing_RejectJob = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/RejectJob', grpc.web.MethodType.UNARY, proto.dasha.sdk.RejectJobMessage, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.RejectJobMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.RejectJobMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.rejectJob =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/RejectJob', request, metadata || {}, methodDescriptor_Processing_RejectJob, callback);
    };
/**
 * @param {!proto.dasha.sdk.RejectJobMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.rejectJob =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/RejectJob', request, metadata || {}, methodDescriptor_Processing_RejectJob);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.EnqueueJobRequest,
 *   !proto.dasha.sdk.EnqueueJobResponseArray>}
 */
const methodDescriptor_Processing_EnqueueJob = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/EnqueueJob', grpc.web.MethodType.UNARY, proto.dasha.sdk.EnqueueJobRequest, proto.dasha.sdk.EnqueueJobResponseArray, 
/**
 * @param {!proto.dasha.sdk.EnqueueJobRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.EnqueueJobResponseArray.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.EnqueueJobRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.EnqueueJobResponseArray)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.EnqueueJobResponseArray>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.enqueueJob =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/EnqueueJob', request, metadata || {}, methodDescriptor_Processing_EnqueueJob, callback);
    };
/**
 * @param {!proto.dasha.sdk.EnqueueJobRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.EnqueueJobResponseArray>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.enqueueJob =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/EnqueueJob', request, metadata || {}, methodDescriptor_Processing_EnqueueJob);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.ClientStreamMessage,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_Processing_SendRuntimeMessage = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/SendRuntimeMessage', grpc.web.MethodType.UNARY, proto.dasha.sdk.ClientStreamMessage, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.ClientStreamMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.ClientStreamMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.sendRuntimeMessage =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/SendRuntimeMessage', request, metadata || {}, methodDescriptor_Processing_SendRuntimeMessage, callback);
    };
/**
 * @param {!proto.dasha.sdk.ClientStreamMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.sendRuntimeMessage =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/SendRuntimeMessage', request, metadata || {}, methodDescriptor_Processing_SendRuntimeMessage);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.ClientStreamMessage,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_Processing_SendDebugMessage = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/SendDebugMessage', grpc.web.MethodType.UNARY, proto.dasha.sdk.ClientStreamMessage, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.ClientStreamMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.ClientStreamMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.sendDebugMessage =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/SendDebugMessage', request, metadata || {}, methodDescriptor_Processing_SendDebugMessage, callback);
    };
/**
 * @param {!proto.dasha.sdk.ClientStreamMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.sendDebugMessage =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/SendDebugMessage', request, metadata || {}, methodDescriptor_Processing_SendDebugMessage);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.DiagnosticJobRequest,
 *   !proto.dasha.sdk.DiagnosticJobResponse>}
 */
const methodDescriptor_Processing_GetJobInformation = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/GetJobInformation', grpc.web.MethodType.UNARY, proto.dasha.sdk.DiagnosticJobRequest, proto.dasha.sdk.DiagnosticJobResponse, 
/**
 * @param {!proto.dasha.sdk.DiagnosticJobRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.DiagnosticJobResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.DiagnosticJobRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.DiagnosticJobResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.DiagnosticJobResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.getJobInformation =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/GetJobInformation', request, metadata || {}, methodDescriptor_Processing_GetJobInformation, callback);
    };
/**
 * @param {!proto.dasha.sdk.DiagnosticJobRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.DiagnosticJobResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.getJobInformation =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/GetJobInformation', request, metadata || {}, methodDescriptor_Processing_GetJobInformation);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.DiagnosticLimitsRequest,
 *   !proto.dasha.sdk.DiagnosticLimitsResponse>}
 */
const methodDescriptor_Processing_GetLimitsInformation = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/GetLimitsInformation', grpc.web.MethodType.UNARY, proto.dasha.sdk.DiagnosticLimitsRequest, proto.dasha.sdk.DiagnosticLimitsResponse, 
/**
 * @param {!proto.dasha.sdk.DiagnosticLimitsRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.DiagnosticLimitsResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.DiagnosticLimitsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.DiagnosticLimitsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.DiagnosticLimitsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.getLimitsInformation =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/GetLimitsInformation', request, metadata || {}, methodDescriptor_Processing_GetLimitsInformation, callback);
    };
/**
 * @param {!proto.dasha.sdk.DiagnosticLimitsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.DiagnosticLimitsResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.getLimitsInformation =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/GetLimitsInformation', request, metadata || {}, methodDescriptor_Processing_GetLimitsInformation);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.DiagnosticQueueRequest,
 *   !proto.dasha.sdk.DiagnosticQueuesResponse>}
 */
const methodDescriptor_Processing_GetQueuesInformation = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/GetQueuesInformation', grpc.web.MethodType.UNARY, proto.dasha.sdk.DiagnosticQueueRequest, proto.dasha.sdk.DiagnosticQueuesResponse, 
/**
 * @param {!proto.dasha.sdk.DiagnosticQueueRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.DiagnosticQueuesResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.DiagnosticQueueRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.DiagnosticQueuesResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.DiagnosticQueuesResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.getQueuesInformation =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/GetQueuesInformation', request, metadata || {}, methodDescriptor_Processing_GetQueuesInformation, callback);
    };
/**
 * @param {!proto.dasha.sdk.DiagnosticQueueRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.DiagnosticQueuesResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.getQueuesInformation =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/GetQueuesInformation', request, metadata || {}, methodDescriptor_Processing_GetQueuesInformation);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.InstanceConcurrencySetRequest,
 *   !proto.dasha.sdk.InstanceConcurrencySetResponse>}
 */
const methodDescriptor_Processing_SetInstanceConcurrency = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/SetInstanceConcurrency', grpc.web.MethodType.UNARY, proto.dasha.sdk.InstanceConcurrencySetRequest, proto.dasha.sdk.InstanceConcurrencySetResponse, 
/**
 * @param {!proto.dasha.sdk.InstanceConcurrencySetRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.InstanceConcurrencySetResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.InstanceConcurrencySetRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.InstanceConcurrencySetResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.InstanceConcurrencySetResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.setInstanceConcurrency =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/SetInstanceConcurrency', request, metadata || {}, methodDescriptor_Processing_SetInstanceConcurrency, callback);
    };
/**
 * @param {!proto.dasha.sdk.InstanceConcurrencySetRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.InstanceConcurrencySetResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.setInstanceConcurrency =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/SetInstanceConcurrency', request, metadata || {}, methodDescriptor_Processing_SetInstanceConcurrency);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AudioClientConnectionRequest,
 *   !proto.dasha.sdk.AudioClientMessage>}
 */
const methodDescriptor_Processing_AudioClientStateStream = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/AudioClientStateStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.AudioClientConnectionRequest, proto.dasha.sdk.AudioClientMessage, 
/**
 * @param {!proto.dasha.sdk.AudioClientConnectionRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.AudioClientMessage.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AudioClientConnectionRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.AudioClientMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.audioClientStateStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientStateStream', request, metadata || {}, methodDescriptor_Processing_AudioClientStateStream);
    };
/**
 * @param {!proto.dasha.sdk.AudioClientConnectionRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.AudioClientMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.audioClientStateStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientStateStream', request, metadata || {}, methodDescriptor_Processing_AudioClientStateStream);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AudioClientStreamRequest,
 *   !proto.dasha.sdk.AudioClientConnectionMessage>}
 */
const methodDescriptor_Processing_ListenForAudioClients = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/ListenForAudioClients', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.AudioClientStreamRequest, proto.dasha.sdk.AudioClientConnectionMessage, 
/**
 * @param {!proto.dasha.sdk.AudioClientStreamRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.AudioClientConnectionMessage.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AudioClientStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.AudioClientConnectionMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.listenForAudioClients =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/ListenForAudioClients', request, metadata || {}, methodDescriptor_Processing_ListenForAudioClients);
    };
/**
 * @param {!proto.dasha.sdk.AudioClientStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.AudioClientConnectionMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.listenForAudioClients =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.Processing/ListenForAudioClients', request, metadata || {}, methodDescriptor_Processing_ListenForAudioClients);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AudioClientKickRequest,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_Processing_AudioClientKick = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/AudioClientKick', grpc.web.MethodType.UNARY, proto.dasha.sdk.AudioClientKickRequest, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.AudioClientKickRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AudioClientKickRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.audioClientKick =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientKick', request, metadata || {}, methodDescriptor_Processing_AudioClientKick, callback);
    };
/**
 * @param {!proto.dasha.sdk.AudioClientKickRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.audioClientKick =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientKick', request, metadata || {}, methodDescriptor_Processing_AudioClientKick);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AudioClientInviteRequest,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_Processing_AudioClientInvite = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/AudioClientInvite', grpc.web.MethodType.UNARY, proto.dasha.sdk.AudioClientInviteRequest, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.AudioClientInviteRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AudioClientInviteRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.audioClientInvite =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientInvite', request, metadata || {}, methodDescriptor_Processing_AudioClientInvite, callback);
    };
/**
 * @param {!proto.dasha.sdk.AudioClientInviteRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.audioClientInvite =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientInvite', request, metadata || {}, methodDescriptor_Processing_AudioClientInvite);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AudioClientCloseRoomRequest,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_Processing_AudioClientCloseRoom = new grpc.web.MethodDescriptor('/dasha.sdk.Processing/AudioClientCloseRoom', grpc.web.MethodType.UNARY, proto.dasha.sdk.AudioClientCloseRoomRequest, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.AudioClientCloseRoomRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AudioClientCloseRoomRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ProcessingClient.prototype.audioClientCloseRoom =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientCloseRoom', request, metadata || {}, methodDescriptor_Processing_AudioClientCloseRoom, callback);
    };
/**
 * @param {!proto.dasha.sdk.AudioClientCloseRoomRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ProcessingPromiseClient.prototype.audioClientCloseRoom =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.Processing/AudioClientCloseRoom', request, metadata || {}, methodDescriptor_Processing_AudioClientCloseRoom);
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.TextProtocolClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.TextProtocolPromiseClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.TextProtocolMessage,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_TextProtocol_SendMessage = new grpc.web.MethodDescriptor('/dasha.sdk.TextProtocol/SendMessage', grpc.web.MethodType.UNARY, proto.dasha.sdk.TextProtocolMessage, proto.dasha.sdk.Empty, 
/**
 * @param {!proto.dasha.sdk.TextProtocolMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.TextProtocolMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.TextProtocolClient.prototype.sendMessage =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.TextProtocol/SendMessage', request, metadata || {}, methodDescriptor_TextProtocol_SendMessage, callback);
    };
/**
 * @param {!proto.dasha.sdk.TextProtocolMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.TextProtocolPromiseClient.prototype.sendMessage =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.TextProtocol/SendMessage', request, metadata || {}, methodDescriptor_TextProtocol_SendMessage);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.TextProtocolStreamInit,
 *   !proto.dasha.sdk.TextProtocolMessage>}
 */
const methodDescriptor_TextProtocol_MessageStream = new grpc.web.MethodDescriptor('/dasha.sdk.TextProtocol/MessageStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.TextProtocolStreamInit, proto.dasha.sdk.TextProtocolMessage, 
/**
 * @param {!proto.dasha.sdk.TextProtocolStreamInit} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.TextProtocolMessage.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.TextProtocolStreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.TextProtocolMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.TextProtocolClient.prototype.messageStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.TextProtocol/MessageStream', request, metadata || {}, methodDescriptor_TextProtocol_MessageStream);
    };
/**
 * @param {!proto.dasha.sdk.TextProtocolStreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.TextProtocolMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.TextProtocolPromiseClient.prototype.messageStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.TextProtocol/MessageStream', request, metadata || {}, methodDescriptor_TextProtocol_MessageStream);
    };
module.exports = proto.dasha.sdk;
//# sourceMappingURL=sdk_grpc_web_pb.js.map