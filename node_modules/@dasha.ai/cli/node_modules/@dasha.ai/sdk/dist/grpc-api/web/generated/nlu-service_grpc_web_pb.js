"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for dasha.sdk
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
const grpc = {};
grpc.web = require('grpc-web');
const proto = {};
proto.dasha = {};
proto.dasha.sdk = require('./nlu-service_pb.js');
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.NluServiceClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.NluServicePromiseClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.TrainRequest,
 *   !proto.dasha.sdk.TrainStatusStream>}
 */
const methodDescriptor_NluService_Train = new grpc.web.MethodDescriptor('/dasha.sdk.NluService/Train', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.TrainRequest, proto.dasha.sdk.TrainStatusStream, 
/**
 * @param {!proto.dasha.sdk.TrainRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.TrainStatusStream.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.TrainRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.TrainStatusStream>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.NluServiceClient.prototype.train =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.NluService/Train', request, metadata || {}, methodDescriptor_NluService_Train);
    };
/**
 * @param {!proto.dasha.sdk.TrainRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.TrainStatusStream>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.NluServicePromiseClient.prototype.train =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.NluService/Train', request, metadata || {}, methodDescriptor_NluService_Train);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.RecognitionRequest,
 *   !proto.dasha.sdk.RecognitionResponse>}
 */
const methodDescriptor_NluService_Recognize = new grpc.web.MethodDescriptor('/dasha.sdk.NluService/Recognize', grpc.web.MethodType.UNARY, proto.dasha.sdk.RecognitionRequest, proto.dasha.sdk.RecognitionResponse, 
/**
 * @param {!proto.dasha.sdk.RecognitionRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.RecognitionResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.RecognitionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.RecognitionResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.RecognitionResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.NluServiceClient.prototype.recognize =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.NluService/Recognize', request, metadata || {}, methodDescriptor_NluService_Recognize, callback);
    };
/**
 * @param {!proto.dasha.sdk.RecognitionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.RecognitionResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.NluServicePromiseClient.prototype.recognize =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.NluService/Recognize', request, metadata || {}, methodDescriptor_NluService_Recognize);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.AvailableSkillsRequest,
 *   !proto.dasha.sdk.AvailableSkillsResponse>}
 */
const methodDescriptor_NluService_GetAvailableSkills = new grpc.web.MethodDescriptor('/dasha.sdk.NluService/GetAvailableSkills', grpc.web.MethodType.UNARY, proto.dasha.sdk.AvailableSkillsRequest, proto.dasha.sdk.AvailableSkillsResponse, 
/**
 * @param {!proto.dasha.sdk.AvailableSkillsRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.AvailableSkillsResponse.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.AvailableSkillsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.AvailableSkillsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.AvailableSkillsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.NluServiceClient.prototype.getAvailableSkills =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.NluService/GetAvailableSkills', request, metadata || {}, methodDescriptor_NluService_GetAvailableSkills, callback);
    };
/**
 * @param {!proto.dasha.sdk.AvailableSkillsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.AvailableSkillsResponse>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.NluServicePromiseClient.prototype.getAvailableSkills =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.NluService/GetAvailableSkills', request, metadata || {}, methodDescriptor_NluService_GetAvailableSkills);
    };
module.exports = proto.dasha.sdk;
//# sourceMappingURL=nlu-service_grpc_web_pb.js.map