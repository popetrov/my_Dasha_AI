"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for dasha.api.grpcapi.grpccallgateway
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
const grpc = {};
grpc.web = require('grpc-web');
const proto = {};
proto.dasha = {};
proto.dasha.api = {};
proto.dasha.api.grpcapi = {};
proto.dasha.api.grpcapi.grpccallgateway = require('./call-gateway_pb.js');
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolPromiseClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.api.grpcapi.grpccallgateway.ConnectMessage,
 *   !proto.dasha.api.grpcapi.grpccallgateway.ConnectionResponse>}
 */
const methodDescriptor_AudioGatewayProtocol_Connect = new grpc.web.MethodDescriptor('/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Connect', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.api.grpcapi.grpccallgateway.ConnectMessage, proto.dasha.api.grpcapi.grpccallgateway.ConnectionResponse, 
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.ConnectMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.api.grpcapi.grpccallgateway.ConnectionResponse.deserializeBinary);
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.ConnectMessage} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.api.grpcapi.grpccallgateway.ConnectionResponse>}
 *     The XHR Node Readable Stream
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolClient.prototype.connect =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Connect', request, metadata || {}, methodDescriptor_AudioGatewayProtocol_Connect);
    };
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.ConnectMessage} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.api.grpcapi.grpccallgateway.ConnectionResponse>}
 *     The XHR Node Readable Stream
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolPromiseClient.prototype.connect =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Connect', request, metadata || {}, methodDescriptor_AudioGatewayProtocol_Connect);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.api.grpcapi.grpccallgateway.InviteRequestMessage,
 *   !proto.dasha.api.grpcapi.grpccallgateway.Empty>}
 */
const methodDescriptor_AudioGatewayProtocol_InviteRequest = new grpc.web.MethodDescriptor('/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/InviteRequest', grpc.web.MethodType.UNARY, proto.dasha.api.grpcapi.grpccallgateway.InviteRequestMessage, proto.dasha.api.grpcapi.grpccallgateway.Empty, 
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.InviteRequestMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.api.grpcapi.grpccallgateway.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.InviteRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.api.grpcapi.grpccallgateway.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.api.grpcapi.grpccallgateway.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolClient.prototype.inviteRequest =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/InviteRequest', request, metadata || {}, methodDescriptor_AudioGatewayProtocol_InviteRequest, callback);
    };
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.InviteRequestMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.api.grpcapi.grpccallgateway.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolPromiseClient.prototype.inviteRequest =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/InviteRequest', request, metadata || {}, methodDescriptor_AudioGatewayProtocol_InviteRequest);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.api.grpcapi.grpccallgateway.LeaveMessage,
 *   !proto.dasha.api.grpcapi.grpccallgateway.Empty>}
 */
const methodDescriptor_AudioGatewayProtocol_Leave = new grpc.web.MethodDescriptor('/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Leave', grpc.web.MethodType.UNARY, proto.dasha.api.grpcapi.grpccallgateway.LeaveMessage, proto.dasha.api.grpcapi.grpccallgateway.Empty, 
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.LeaveMessage} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.api.grpcapi.grpccallgateway.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.LeaveMessage} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.api.grpcapi.grpccallgateway.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.api.grpcapi.grpccallgateway.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolClient.prototype.leave =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Leave', request, metadata || {}, methodDescriptor_AudioGatewayProtocol_Leave, callback);
    };
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.LeaveMessage} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.api.grpcapi.grpccallgateway.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocolPromiseClient.prototype.leave =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioGatewayProtocol/Leave', request, metadata || {}, methodDescriptor_AudioGatewayProtocol_Leave);
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioStreamProtocolClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioStreamProtocolPromiseClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.api.grpcapi.grpccallgateway.AudioStreamRequest,
 *   !proto.dasha.api.grpcapi.grpccallgateway.AudioStreamResponse>}
 */
const methodDescriptor_AudioStreamProtocol_AudioStream = new grpc.web.MethodDescriptor('/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/AudioStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.api.grpcapi.grpccallgateway.AudioStreamRequest, proto.dasha.api.grpcapi.grpccallgateway.AudioStreamResponse, 
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.AudioStreamRequest} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.api.grpcapi.grpccallgateway.AudioStreamResponse.deserializeBinary);
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.AudioStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.api.grpcapi.grpccallgateway.AudioStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioStreamProtocolClient.prototype.audioStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/AudioStream', request, metadata || {}, methodDescriptor_AudioStreamProtocol_AudioStream);
    };
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.AudioStreamRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.api.grpcapi.grpccallgateway.AudioStreamResponse>}
 *     The XHR Node Readable Stream
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioStreamProtocolPromiseClient.prototype.audioStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/AudioStream', request, metadata || {}, methodDescriptor_AudioStreamProtocol_AudioStream);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.api.grpcapi.grpccallgateway.AudioSegment,
 *   !proto.dasha.api.grpcapi.grpccallgateway.Empty>}
 */
const methodDescriptor_AudioStreamProtocol_SendAudio = new grpc.web.MethodDescriptor('/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/SendAudio', grpc.web.MethodType.UNARY, proto.dasha.api.grpcapi.grpccallgateway.AudioSegment, proto.dasha.api.grpcapi.grpccallgateway.Empty, 
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.AudioSegment} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.api.grpcapi.grpccallgateway.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.AudioSegment} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.api.grpcapi.grpccallgateway.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.api.grpcapi.grpccallgateway.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioStreamProtocolClient.prototype.sendAudio =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/SendAudio', request, metadata || {}, methodDescriptor_AudioStreamProtocol_SendAudio, callback);
    };
/**
 * @param {!proto.dasha.api.grpcapi.grpccallgateway.AudioSegment} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.api.grpcapi.grpccallgateway.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioStreamProtocolPromiseClient.prototype.sendAudio =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.api.grpcapi.grpccallgateway.AudioStreamProtocol/SendAudio', request, metadata || {}, methodDescriptor_AudioStreamProtocol_SendAudio);
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioBidirectionalStreamProtocolClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.api.grpcapi.grpccallgateway.AudioBidirectionalStreamProtocolPromiseClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
module.exports = proto.dasha.api.grpcapi.grpccallgateway;
//# sourceMappingURL=call-gateway_grpc_web_pb.js.map