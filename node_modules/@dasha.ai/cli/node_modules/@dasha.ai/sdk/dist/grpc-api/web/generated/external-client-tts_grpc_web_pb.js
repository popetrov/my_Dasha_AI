"use strict";
/**
 * @fileoverview gRPC-Web generated client stub for dasha.sdk
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
const grpc = {};
grpc.web = require('grpc-web');
var sdk_pb = require('./sdk_pb.js');
const proto = {};
proto.dasha = {};
proto.dasha.sdk = require('./external-client-tts_pb.js');
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.ExternalClientTtsProtocolClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.dasha.sdk.ExternalClientTtsProtocolPromiseClient =
    function (hostname, credentials, options) {
        if (!options)
            options = {};
        options.format = 'text';
        /**
         * @private @const {!grpc.web.GrpcWebClientBase} The client
         */
        this.client_ = new grpc.web.GrpcWebClientBase(options);
        /**
         * @private @const {string} The hostname
         */
        this.hostname_ = hostname;
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.ExternalClientTtsResponse,
 *   !proto.dasha.sdk.Empty>}
 */
const methodDescriptor_ExternalClientTtsProtocol_SendAudio = new grpc.web.MethodDescriptor('/dasha.sdk.ExternalClientTtsProtocol/SendAudio', grpc.web.MethodType.UNARY, proto.dasha.sdk.ExternalClientTtsResponse, sdk_pb.Empty, 
/**
 * @param {!proto.dasha.sdk.ExternalClientTtsResponse} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, sdk_pb.Empty.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.ExternalClientTtsResponse} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.dasha.sdk.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ExternalClientTtsProtocolClient.prototype.sendAudio =
    function (request, metadata, callback) {
        return this.client_.rpcCall(this.hostname_ +
            '/dasha.sdk.ExternalClientTtsProtocol/SendAudio', request, metadata || {}, methodDescriptor_ExternalClientTtsProtocol_SendAudio, callback);
    };
/**
 * @param {!proto.dasha.sdk.ExternalClientTtsResponse} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.dasha.sdk.Empty>}
 *     Promise that resolves to the response
 */
proto.dasha.sdk.ExternalClientTtsProtocolPromiseClient.prototype.sendAudio =
    function (request, metadata) {
        return this.client_.unaryCall(this.hostname_ +
            '/dasha.sdk.ExternalClientTtsProtocol/SendAudio', request, metadata || {}, methodDescriptor_ExternalClientTtsProtocol_SendAudio);
    };
/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.dasha.sdk.ExternalClientTtsProtocolStreamInit,
 *   !proto.dasha.sdk.ExternalClientTtsProtocolMessage>}
 */
const methodDescriptor_ExternalClientTtsProtocol_AudioRequestStream = new grpc.web.MethodDescriptor('/dasha.sdk.ExternalClientTtsProtocol/AudioRequestStream', grpc.web.MethodType.SERVER_STREAMING, proto.dasha.sdk.ExternalClientTtsProtocolStreamInit, proto.dasha.sdk.ExternalClientTtsProtocolMessage, 
/**
 * @param {!proto.dasha.sdk.ExternalClientTtsProtocolStreamInit} request
 * @return {!Uint8Array}
 */
function (request) {
    return request.serializeBinary();
}, proto.dasha.sdk.ExternalClientTtsProtocolMessage.deserializeBinary);
/**
 * @param {!proto.dasha.sdk.ExternalClientTtsProtocolStreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.ExternalClientTtsProtocolMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ExternalClientTtsProtocolClient.prototype.audioRequestStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.ExternalClientTtsProtocol/AudioRequestStream', request, metadata || {}, methodDescriptor_ExternalClientTtsProtocol_AudioRequestStream);
    };
/**
 * @param {!proto.dasha.sdk.ExternalClientTtsProtocolStreamInit} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.dasha.sdk.ExternalClientTtsProtocolMessage>}
 *     The XHR Node Readable Stream
 */
proto.dasha.sdk.ExternalClientTtsProtocolPromiseClient.prototype.audioRequestStream =
    function (request, metadata) {
        return this.client_.serverStreaming(this.hostname_ +
            '/dasha.sdk.ExternalClientTtsProtocol/AudioRequestStream', request, metadata || {}, methodDescriptor_ExternalClientTtsProtocol_AudioRequestStream);
    };
module.exports = proto.dasha.sdk;
//# sourceMappingURL=external-client-tts_grpc_web_pb.js.map