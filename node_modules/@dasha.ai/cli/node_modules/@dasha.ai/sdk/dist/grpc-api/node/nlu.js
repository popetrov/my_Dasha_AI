"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NluServiceClient = void 0;
const base = __importStar(require("./base"));
const errors = __importStar(require("../../errors"));
const nlu_service_grpc_pb = __importStar(require("./generated/nlu-service_grpc_pb"));
const nlu_service_pb = __importStar(require("./generated/nlu-service_pb"));
class NluServiceClient extends base.Client {
    constructor(account, log) {
        super(nlu_service_grpc_pb.NluServiceClient, account, log);
    }
    train(nluContent, language) {
        return new base.Stream((stream) => {
            const trainRequest = new nlu_service_pb.TrainRequest();
            trainRequest.setDataset(Buffer.from(JSON.stringify(nluContent)));
            trainRequest.setLanguage(language);
            const grpcStream = this.grpcClient.train(trainRequest);
            grpcStream.on("error", (grpcError) => {
                stream.emit("error", this.wrapGrpcError(grpcError));
                stream.cancel();
            });
            grpcStream.on("end", () => {
                this.log.debug(`Got grpc-event "end". Removing all listeners.`);
                stream.removeAllListeners();
            });
            grpcStream.on("data", (grpcMessage) => {
                const { processing, failed, ready } = grpcMessage.toObject();
                if (failed !== undefined) {
                    const nluError = new errors.NluServiceTrainFailedError(failed.reason);
                    stream.emit("error", nluError);
                }
                if (processing !== undefined) {
                    const { percent, stageDescription, stageScopeList, extraInfoJson } = processing;
                    stream.emit("processing", percent, stageDescription, stageScopeList, extraInfoJson);
                }
                if (ready !== undefined) {
                    try {
                        stream.emit("ready", ready.skillId);
                    }
                    catch (e) {
                        stream.emit("error", new errors.NluServiceError(`Could not parse training result object: ${e.message}`));
                    }
                }
            });
            return grpcStream;
        });
    }
    recognize(skillIds, language, text) {
        return new Promise((resolve, reject) => {
            const recognitionRequest = new nlu_service_pb.RecognitionRequest();
            recognitionRequest.setSkillIdsList(skillIds);
            recognitionRequest.setLanguage(language);
            recognitionRequest.setText(text);
            this.grpcClient.recognize(recognitionRequest, (grpcError, grpcResponse) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve(grpcResponse.toObject());
            });
        });
    }
    getAvailableSkills(language) {
        return new Promise((resolve, reject) => {
            const availableSkillsRequest = new nlu_service_pb.AvailableSkillsRequest();
            availableSkillsRequest.setLanguage(language);
            this.grpcClient.getAvailableSkills(availableSkillsRequest, (grpcError, grpcResponse) => {
                if (grpcError) {
                    reject(this.wrapGrpcError(grpcError));
                    return;
                }
                resolve(grpcResponse.toObject());
            });
        });
    }
}
exports.NluServiceClient = NluServiceClient;
//# sourceMappingURL=nlu.js.map