"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAxiosInstance = void 0;
const axios_1 = __importDefault(require("axios"));
/**
 * Create an AxiosInstance with the proxy agents already set up.
 *
 * @internal
 */
function createAxiosInstance(config) {
    const instance = axios_1.default.create(config);
    const proxyPromise = Promise.resolve().then(() => __importStar(require("proxy-agent"))).then(({ default: ProxyAgent }) => {
        instance.defaults.proxy = false;
        instance.defaults.httpAgent = new ProxyAgent();
        instance.defaults.httpsAgent = new ProxyAgent();
    })
        .catch(() => null);
    // do not run any requests until the optional dependency is resolved
    const interceptorHandle = instance.interceptors.request.use(async (config) => {
        await proxyPromise;
        config.proxy = false;
        config.httpAgent = instance.defaults.httpAgent;
        config.httpsAgent = instance.defaults.httpsAgent;
        axios_1.default.interceptors.request.eject(interceptorHandle);
        return config;
    });
    return instance;
}
exports.createAxiosInstance = createAxiosInstance;
//# sourceMappingURL=http.js.map