import { Account } from "./account";
/**
 * Contents of dataset file with intents and/or entities
 */
export declare type NluContent = Record<string, unknown>;
/**
 * Information about the skill
 */
export interface SkillInformation {
    /**
     * BCP 47 language tag denoting the skill language (e. g. "en-US")
     */
    language: string;
    /**
     * Skill id.
     */
    id: string;
}
/**
 * Result object of Intent recognition (V1)
 */
export interface IntentRecognitionResultV1 {
    /**
     * Discriminator field
     */
    type: "intent";
    /**
     * The name of the intent.
     * @remarks
     * If null, then the intent expresses the positive or negative meaning of the text (tomita 'sentiment' skill)
     */
    intent: string | null;
    /**
     * Reflects in which key the intent was extracted.
     * Intention can possibly be negative, positive or neutral.
     */
    state: string;
    /**
     * The type of sentence in which this intent was extracted.
     * For example, affirmative sentence (sentenceType = 'statement'), interrogative sentence (sentenceType = 'question'), etc.
     */
    sentenceType: string;
    /**
     * Skill which is able to extract this type of data.
     */
    skill: string;
    /**
     * Degree of confidence in intent recognition
     */
    confidence: number;
}
/**
 * Result object of Entity recognition (V1)
 */
export interface DataRecognitionResultV1 {
    /**
     * Discriminator field
     */
    type: "data";
    /**
     * Data that has been recognized.
     */
    data: unknown;
    /**
     * The type of data that this recognition represents.
     */
    dataName: string;
    /**
     * Skill which is able to extract this type of data.
     */
    skill: string;
    /**
     * Degree of confidence in data recognition
     */
    confidence: number;
}
/**
 * Result object of Sentence Type recognition (V1)
 */
export interface SentenceTypeRecognitionV1 {
    /**
     * Discriminator field
     */
    type: "sentenceType";
    /**
     * The type of sentence being recognized.
     * For example, affirmative sentence (sentenceType = 'statement'), interrogative sentence (sentenceType = 'question'), etc.
     */
    sentenceType?: string;
    /**
     * Degree of confidence in recognized sentenceType
     */
    confidence: number;
}
/**
 * Result object of NLU recognition (V1)
 */
export declare type RecognitionResponseV1 = {
    intents: IntentRecognitionResultV1[];
    data: DataRecognitionResultV1[];
    sentenceType: SentenceTypeRecognitionV1;
};
/**
 * NLU recognition results grouped by language (V1)
 */
export declare type RecognitionResultV1 = {
    [language: string]: RecognitionResponseV1;
};
/**
 * NLU reccognition results grouped by versions
 */
export declare type RecognitionResult = {
    v1: RecognitionResultV1;
};
/**
 * Options that can be provided when creating Nlu Service instance
 */
export interface NluOptions {
    /**
     * A Dasha.AI API account to use.
     *
     * If not set, defaults to a "current" account derived in a platform-specific way.
     * For Node.js, the current account may be set using [Dasha CLI].
     *
     * [Dasha CLI]: https://npmjs.com/@dasha.ai/cli
     */
    account?: Account;
}
/**
 * Service for standalone using and testing NLU.
 * Provides the API for training custom datasets, using pretrained skills and performing recognition requests.
 */
export declare class NluService {
    /**
     * Mapping of skill names to information about skills used for recognition
     */
    readonly skillInfo: Record<string, SkillInformation>;
    private closed;
    private options;
    private client;
    private log;
    private account;
    private constructor();
    /**
     * Create instance of NLU service
     * Optionally train dataset @param nluContent with language @param language if provided
     * @param nluContent - Intents file content
     * @param language - BCP 47 language tag denoting language of dataset (e. g. "en-US"). @see {@link https://en.wikipedia.org/wiki/IETF_language_tag}
     * @param options - Launch options
     */
    static create(nluContent?: NluContent, language?: string, options?: NluOptions): Promise<NluService>;
    /**
     * Close nlu service if it is alive
     */
    close(): void;
    /**
     * Check if nlu service is closed
     * @returns true if service is closed, false otherwise
     */
    get isClosed(): boolean;
    /**
     * Process text in nlu service and return recognition result
     * @param text - Text to be recognized
     * @returns recognition result
     */
    recognize(text: string): Promise<RecognitionResult>;
    /**
     * Check if provided skills are available and use them in further recognitions
     * @param skills
     */
    loadSkills(skills: SkillInformation[]): Promise<void>;
    /**
     * Train provided nlu dataset
     * @param nluDatasetPath - Path to nlu dataset
     * @param language - BCP 47 language tag denoting language of dataset (e. g. "en-US"). @see {@link https://en.wikipedia.org/wiki/IETF_language_tag}
     * @returns id of trained skill
     */
    train(nluDatasetPath: string, language: string): Promise<string>;
    /**
     * Train provided nlu dataset
     * @param nluContent - Content of nlu dataset
     * @param language - BCP 47 language tag denoting language of dataset (e. g. "en-US"). @see {@link https://en.wikipedia.org/wiki/IETF_language_tag}
     * @returns id of trained skill
     */
    train(nluContent: NluContent, language: string): Promise<string>;
    private trainInner;
    private getAvailableSkills;
    private static convertRecognitionResult;
    private static convertAvailableSkillsResult;
}
