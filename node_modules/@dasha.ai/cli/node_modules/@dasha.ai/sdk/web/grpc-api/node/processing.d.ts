import * as base from "./base";
import { Account } from "../../account";
import { Logger } from "../../log";
import { AudioClientStream, AudioServerStream, DebugStream, InstanceStream, IProcessingClient, RpcError, RpcResponse, RuntimeStream } from "../types/processing";
import * as sdk_grpc_pb from "./generated/sdk_grpc_pb";
export declare class ProcessingClient extends base.Client<sdk_grpc_pb.ProcessingClient> implements IProcessingClient {
    constructor(account: Account, log: Logger);
    registerInstanceStream(request: {
        applicationZip: Uint8Array;
        concurrency: number;
        groupId?: string;
        sdkVersion?: string;
        instanceId?: string;
    }): InstanceStream;
    private tryParseJSON;
    setInstanceConcurrency(request: {
        instanceId: string;
        concurrency: number;
    }): Promise<void>;
    addSessionConfig(request: {
        instanceId: string;
        configName?: string;
        configZip: Uint8Array;
    }): Promise<{
        configName: string;
    }>;
    runtimeStream(request: {
        instanceId: string;
    }): RuntimeStream;
    debugStream(request: {
        instanceId: string;
    }): DebugStream;
    acceptJob(request: {
        instanceId: string;
        jobId: string;
        sessionConfigName: string;
        data?: Record<string, unknown>;
    }): Promise<void>;
    rejectJob(request: {
        instanceId: string;
        jobId: string;
    }): Promise<void>;
    enqueueJob(request: {
        instanceId: string;
        jobs: Array<{
            jobId: string;
            priority: number;
            after: Date;
            before: Date;
        }>;
    }): Promise<Array<{
        customerJobId: string;
        assignedJobId: string;
    }>>;
    sendRpcResponse(request: {
        instanceId: string;
        rpcResponse: RpcResponse;
    }): Promise<void>;
    sendRpcError(request: {
        instanceId: string;
        rpcError: RpcError;
    }): Promise<void>;
    audioServerStream(request: {
        instanceId: string;
    }): AudioServerStream;
    audioClientStream(request: {
        audioClientId: number;
    }): AudioClientStream;
}
