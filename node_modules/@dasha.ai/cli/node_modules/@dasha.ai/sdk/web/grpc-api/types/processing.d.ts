import * as errors from "../../errors";
import { IStream, IClient } from "./base";
export interface JobNotification {
    assignedJobId: string;
    customerJobId: string;
    data: Record<string, unknown>;
    status: JobStatus;
}
export declare enum JobStatus {
    UNSPECIFIED = 0,
    STARTING = 1,
    TIMED_OUT = 2,
    FAILED = 3,
    COMPLETED = 4,
    REJECTED = 5,
    READY_DEBUG_LOG = 6,
    READY_RECORD_ID = 7
}
export interface AdditionalInformation {
    jobStarted?: Date;
    jobEnded?: Date;
}
export interface JobAdditionalInformation {
    assignedJobId: string;
    customerJobId: string;
    data: AdditionalInformation;
}
export declare type ProgressEventSeverity = "error" | "warn" | "info" | "http" | "verbose" | "debug" | "silly";
export interface ProgressEvent {
    percent: number;
    description: string;
    scopes: string[];
    severity: ProgressEventSeverity;
}
export interface RpcRequest {
    jobId: string;
    requestId: number;
    method: string;
    parameters: Record<string, unknown>;
}
export interface RpcResponse {
    jobId: string;
    method: string;
    requestId: number;
    result: unknown;
}
export interface RpcError {
    jobId: string;
    method: string;
    requestId: number;
    message: string;
}
export declare type InstanceStream = IStream<{
    error: [error: errors.Error];
    success: [
        applicationId: string,
        instanceId: string,
        applicationName: string,
        inputSchema: unknown,
        outputSchema: unknown
    ];
    progress: [event: ProgressEvent];
    jobTimedOut: [jobId: string, jobKey: string];
    jobRejected: [jobId: string, jobKey: string, jobData: Record<string, unknown>];
    jobStarting: [jobId: string, jobKey: string, jobData: Record<string, unknown>];
    jobFailed: [jobId: string, jobKey: string, jobData: Record<string, unknown>];
    jobCompleted: [jobId: string, jobKey: string, jobData: Record<string, unknown>];
    jobRecordIdReady: [jobId: string, jobKey: string, recordingId: string];
    jobAdditionalInformation: [jobId: string, jobKey: string, data: AdditionalInformation];
}>;
export declare type RuntimeStream = IStream<{
    error: [error: errors.Error];
    rpcRequest: [request: RpcRequest];
    internalRpcRequest: [request: RpcRequest];
}>;
export declare type DebugStream = IStream<{
    error: [error: errors.Error];
    jobEvent: [jobId: string, event: unknown];
    debugLog: [jobId: string, message: string];
}>;
export declare type AudioServerStream = IStream<{
    error: [error: errors.Error];
    connect: [audioClientId: number, additionalInfo: string];
}>;
export declare type AudioClientStream = IStream<{
    error: [error: errors.Error];
    inviteRequest: [audioClientId: number, additionalInfo: string, roomId?: string];
}>;
export interface IProcessingClient extends IClient {
    registerInstanceStream(request: {
        applicationZip: Uint8Array;
        concurrency: number;
        groupId?: string;
        sdkVersion?: string;
        instanceId?: string;
    }): InstanceStream;
    setInstanceConcurrency(request: {
        instanceId: string;
        concurrency: number;
    }): Promise<void>;
    addSessionConfig(request: {
        instanceId: string;
        configName?: string;
        configZip: Uint8Array;
    }): Promise<{
        configName: string;
    }>;
    runtimeStream(request: {
        instanceId: string;
    }): RuntimeStream;
    debugStream(request: {
        instanceId: string;
    }): DebugStream;
    acceptJob(request: {
        instanceId: string;
        jobId: string;
        sessionConfigName: string;
        data?: Record<string, unknown>;
    }): Promise<void>;
    rejectJob(request: {
        instanceId: string;
        jobId: string;
    }): Promise<void>;
    enqueueJob(request: {
        instanceId: string;
        jobs: Array<{
            jobId: string;
            priority: number;
            after: Date;
            before: Date;
        }>;
    }): Promise<Array<{
        customerJobId: string;
        assignedJobId: string;
    }>>;
    sendRpcResponse(request: {
        instanceId: string;
        rpcResponse: RpcResponse;
    }): Promise<void>;
    sendRpcError(request: {
        instanceId: string;
        rpcError: RpcError;
    }): Promise<void>;
    audioServerStream(request: {
        instanceId: string;
    }): AudioServerStream;
    audioClientStream(request: {
        audioClientId: number;
    }): AudioClientStream;
}
