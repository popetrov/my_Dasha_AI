import * as errors from "../../errors";
import { ProgressEvent } from "../../progress";
import { IStream, IClient } from "./base";
export interface TrainProgressEvent extends ProgressEvent {
    extra_info_json: string;
}
export declare type TrainProgressStream = IStream<{
    error: [error: errors.Error];
    processing: TrainProgressEvent;
    ready: {
        skillId: string;
    };
}>;
export declare type DataRecognitionV1 = {
    type: string;
    skill: string;
    dataName: string;
    dataMap: Array<[string, string]>;
    confidence: number;
};
export declare type IntentRecognitionV1 = {
    type: string;
    skill: string;
    state: string;
    sentenceType: string;
    intent: string;
    confidence: number;
};
export declare type SentenceTypeRecognitionV1 = {
    type: string;
    sentenceType: string;
    confidence: number;
};
export declare type RecognitionResponseV1 = {
    dataRecognitionsList: Array<DataRecognitionV1>;
    intentRecognitionsList: Array<IntentRecognitionV1>;
    sentenceType?: SentenceTypeRecognitionV1;
};
export declare type RecognitionResponse = {
    v1?: RecognitionResponseV1;
};
export declare type AvailableSkillsResponse = {
    availableSkillsList: Array<string>;
};
export interface INluServiceClient extends IClient {
    train(nluContent: Record<string, unknown>, language: string): TrainProgressStream;
    recognize(skillIds: string[], language: string, text: string): Promise<RecognitionResponse>;
    getAvailableSkills(language: string): Promise<AvailableSkillsResponse>;
}
